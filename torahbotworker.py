import django
django.setup()

from sefaria.model import *
import sefaria.system.database as database
from sefaria.system.exceptions import InputError

import praw
import os
import re
import time

reddit = praw.Reddit(
    client_id=os.environ.get('REDDIT_CLIENT_ID'),
    client_secret=os.environ.get('REDDIT_CLIENT_SECRET'),
    password=os.environ.get('REDDIT_PASSWORD'),
    user_agent="TorahBot (by u/o_m_f_g)",
    username="TorahBot",
    )

def get_book_title_variations():
    # these are the books of Tanach that we want to get references
    titles = ["genesis", "exodus", "leviticus", "numbers", "deuteronomy", "joshua", "judges", "Samuel I", "samuel II", "kings I", "kings II", "Isaiah", "jeremiah", "ezekiel", "hosea", "joel", "amos", "obadiah", "jonah", "micah", "nahum", "habakkuk", "zephaniah", "haggai", "zechariah", "malachi", "psalms", "proverbs", "job", "Song of Songs", "ruth", "lamentations", "ecclesiastes", "Esther", "Daniel", "Ezra", "nehemiah", "chronicles I", "chronicles II"]
    result = list(map(lambda title: Ref(title).index.all_titles('en'), titles))
    return [item for sublist in result for item in sublist]

# this is returned from the function above (get_book_title_variations())
titles = ['Bereshit',
 'Gen',
 'Gen.',
 'Breishit',
 'Bereishit',
 'Beresheet',
 'Bereshith',
 'Bereishis',
 'B’resh.',
 'B’reshith',
 'Genesis',
 'Exod.',
 'Ex.',
 'Exo',
 'Shmot',
 'Shemot',
 'Ex',
 'Exo.',
 'Exod',
 'Shemoth',
 'Shemos',
 'Exodus',
 'Vayikra',
 'Lev.',
 'Lev',
 'B’ḥuck.',
 'B’ḥuḳḳothay',
 'vaYikra',
 'Leviticus',
 'Num.',
 'Num',
 'Bamidbar',
 'Bemidbar',
 'Numeri',
 'Numb.',
 'Numbers',
 'Deu.',
 'Devarim',
 'Deu',
 'Deut.',
 'Deut',
 'Dvarim',
 'Devorim',
 'Deuter.',
 'Debarim',
 'Dev.',
 'Deuteronomy',
 'Jos',
 'Yehoshua',
 'Jos.',
 'Josh',
 'Josh.',
 'Joshua',
 'Shoftim',
 'Jdg',
 'Judg',
 'Jdg.',
 'Judg.',
 'Jud.',
 'Judices',
 'Shofetim',
 'Judges',
 'I Sam.',
 '1Sam.',
 'First Samuel',
 'Shmuel Aleph',
 '1Sam',
 'I Shmuel',
 'Samuel I',
 'Shmuel I',
 '1 Samuel',
 'I Sam',
 'I Shemuel',
 'Sam. I',
 '1 Sam.',
 'I. Samuel',
 'I. Sam.',
 '1 Sam',
 'I Samuel',
 '2Sam',
 'Second Samuel',
 'Shmuel Bet',
 'Shmuel II',
 'Samuel II',
 '2 Sam',
 'II Shmuel',
 'II Sam.',
 'II Sam',
 '2Sam.',
 '2 Samuel',
 'II Shemuel',
 '2 Sam.',
 'II. Samuel',
 'II. Sam.',
 'Sam. II',
 'II Samuel',
 'I Melachim',
 'Melachim Aleph',
 'Kings I',
 'Melachim I',
 '1 Kings',
 'First Kings',
 'I Melakhim',
 'Kin. I',
 'I. Kings',
 '1 Kgs.',
 'I Kings',
 'Melachim Bet',
 'Melachim II',
 'Second Kings',
 '2 Kings',
 'II Melachim',
 'Kings II',
 'II Melakhim',
 'Kin. II',
 'II. Kings',
 '2 Kgs.',
 'II Kings',
 'Isa.',
 'Yishayahu',
 'Isa',
 'Yeshayahu',
 'Is.',
 'Isaiah',
 'Yirmiyahu',
 'Jer',
 'Jer.',
 'Yirmiyohu',
 'Jerem.',
 'Yermiyahu',
 'Yirmeyahu',
 'Jeremiah',
 'Ezek',
 'Ezek.',
 'Yehezkel',
 'Yechezkel',
 'Ez.',
 'Yechezkiel',
 'Ezekiel',
 'Hos.',
 'Hos',
 'Hoshea',
 'Hosea',
 'Yoel',
 'Joel',
 'Am.',
 'Amos',
 'Ovadiah',
 'Ob.',
 'Oba.',
 'Ovadyah',
 'Ovadia',
 'Ovadya',
 'Obadiah',
 'Yonah',
 'Jon.',
 'Jon',
 'Jonah',
 'Mic.',
 'Mic',
 'Mikha',
 'Michah',
 'Micha',
 'Micah',
 'Nah.',
 'Nah',
 'Nachum',
 'Nahum',
 'Hab.',
 'Hab',
 'Havakkuk',
 'Habakuk',
 'Habbakuk',
 'Chavakuk',
 'Habakkuk',
 'Zeph.',
 'Tzephaniah',
 'Zeph',
 'Zephania',
 'Tzephania',
 'Zephaniah',
 'Chaggai',
 'Hag',
 'Hag.',
 'Haggai',
 'Zech.',
 'Zech',
 'Zachariah',
 'Zekharia',
 'Zekharya',
 'Zecharia',
 'Zach.',
 'Zecharyah',
 'Zac.',
 'Zechariah',
 'Mal.',
 'Mal',
 'Malachi',
 'Ps',
 'Ps.',
 'Psa',
 'Tehilim',
 'Psa.',
 'Psalm',
 'Tehillim',
 'Psalms',
 'Prov',
 'Pro',
 'Prov.',
 'Mishlei',
 'Pro.',
 'Pr.',
 'Mishle',
 'Proverbs',
 'Iyov',
 'Iyyov',
 'Job',
 'Shir HaShirim',
 'Canticles',
 'Song.',
 'Song',
 'Song of Solomon',
 'Cant.',
 'Canticum',
 'Songs',
 'Shir haShirim',
 'Shir Hashirim',
 'Song of Songs',
 'Rut',
 'Rus',
 'Ruth',
 'Lam',
 'Lam.',
 'Eichah',
 'Eicha',
 'Eikhah',
 'Lamentations',
 'Eccles.',
 'Ecc',
 'Kohelet',
 'Ecc.',
 'Koheleth',
 'Koh.',
 'Eccl.',
 'Koheles',
 'Ecclesiastes',
 'Est.',
 'Est',
 'Ester',
 'Esth.',
 'Esth',
 'Esther',
 'Dan.',
 'Dan',
 'Daniel',
 'Ezr.',
 'Ezr',
 'Ezra',
 'Neh.',
 'Neh',
 'Nechemyah',
 'Nehemiah',
 '1 Chronicles',
 '1Ch.',
 '1 Chron',
 '1 Chr',
 'Chronicles I',
 'I Chr',
 '1 Chron.',
 'I Chr.',
 'I Divrei HaYamim',
 'Divrei HaYamim I',
 'Divrei HaYamim Aleph',
 'First Chronicles',
 '1Ch',
 'I Divrei Ha-yamim',
 'I Divrei Ha-Yamim',
 'I Divrei Hayomim',
 'I Chron.',
 'Chron. I',
 'First Chr.',
 'Divre HaYamim I',
 'Divrei Hayamim I',
 'I Chronicles',
 '2 Chronicles',
 'II Divrei HaYamim',
 'Second Chronicles',
 '2 Chron',
 '2 Chron.',
 '2Ch.',
 'II Chr.',
 'Chronicles II',
 '2Ch',
 'II Chr',
 '2 Chr',
 'Divrei HaYamim II',
 'Divrei HaYamim Bet',
 'II Divrei Ha-yamim',
 'II Divrei Ha-Yamim',
 'II Divrei Hayomim',
 'II Chron.',
 'Chron. II',
 'II Chro.',
 'Second Chr.',
 'Divre HaYamim II',
 'Divrei Hayamim II',
 'II Chronicles']

version_en = "The Holy Scriptures: A New Translation (JPS 1917)"
version_he = "Tanach with Nikkud"

def process_comment(comment):
    print(comment.author.name + ": " + comment.body)
    print('searching for text refs')
    start = time.perf_counter()
    refs = []
    for title in titles:
        regex = '\\b'+re.escape(title)+'\W+\d+:\d+(?:-\d+)?'
        # refs += re.findall(regex, comment.body, re.I)
        refs += re.findall(regex, comment.body)
    end = time.perf_counter()
    print(f"search took {end - start:0.4f} seconds")
    #remove duplicates
    refs = [*set(refs)]
    if len(refs) > 0:
        print("The following refs were found:")
        print(refs)
    else:
        print("No refs found.")
        return
    response = ""
    for tref in refs:
        try:
            oref = Ref(tref)
            response += "**" + tref + "**\n\n"
            response += "*" + oref.text('en', version_en).ja(True).flatten_to_string() + "*\n\n"
            response += oref.text('he', version_he).ja(True).flatten_to_string() + "\n\n"
            response += "\n"
        except InputError as e:
            print("InputError: {}".format(e))
            continue
    print(response)
    # validate that the response is under 10,000 chars.
    comment.reply(response)